name: Build DBC ScootUI RPM

permissions:
  contents: write

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  generate-timestamp:
    name: Generate Build Timestamp
    runs-on: self-hosted
    outputs:
      timestamp: ${{ steps.set-timestamp.outputs.timestamp }}
    steps:
      - name: Set timestamp
        id: set-timestamp
        run: |
          # Generate timestamp in format YYYYMMDDThhmmss
          TIMESTAMP=$(date -u '+%Y%m%dT%H%M%S')
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "Generated timestamp: $TIMESTAMP"

  build-dbc-rpm:
    name: Build ScootUI RPM for DBC
    needs: [generate-timestamp]
    # This job will now run on every push to main or workflow_dispatch,
    # as the check-changes job and its conditional logic have been removed.
    runs-on: dbc
    steps:
      - name: Checkout librescoot repository
        uses: actions/checkout@v4
        with:
          repository: librescoot/librescoot
          fetch-depth: 0
          clean: false
          path: librescoot

      - name: Checkout scootui repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: false
          path: scootui

      - name: Setup build environment
        working-directory: librescoot
        run: |
          mkdir -p yocto
          sudo chown 999:999 yocto

      - name: Setup custom entrypoint script with version update
        working-directory: librescoot
        run: |
          # Copy custom entrypoint script from scootui repository
          cp ../scootui/docker-entrypoint-with-version-update.sh docker/entrypoint-with-version-update.sh
          chmod +x docker/entrypoint-with-version-update.sh
          
          echo "=== DEBUG: Checking if custom entrypoint was copied ==="
          ls -la docker/entrypoint*
          
          # Replace the original entrypoint with our custom one in the docker directory
          # This ensures the Docker build uses our custom script
          cp docker/entrypoint-with-version-update.sh docker/entrypoint.sh
          
          echo "=== DEBUG: Verifying entrypoint.sh contains our custom logic ==="
          grep -n "SCOOTUI_VERSION_UPDATE" docker/entrypoint.sh || echo "ERROR: Custom logic not found in entrypoint.sh"
          
          echo "=== DEBUG: Checking build.sh content before modification ==="
          grep "docker/entrypoint" build.sh || echo "No entrypoint references found"
          
          echo "Custom entrypoint script setup complete"

      - name: Build scootui package for DBC
        working-directory: librescoot
        run: |
          # Modify build scripts for non-interactive mode
          sed -i 's/docker run -it/docker run -i/' build.sh
          sed -i 's/docker run -it/docker run -i/' interactive.sh
          sed -i 's/docker run -i/docker run -i -e EULA=1/' build.sh
          
          # Add SCOOTUI_VERSION_UPDATE environment variable to Docker run command
          sed -i 's/docker run -i -e EULA=1/docker run -i -e EULA=1 -e SCOOTUI_VERSION_UPDATE=${SCOOTUI_VERSION_UPDATE}/' build.sh
          
          echo "=== DEBUG: Environment variables to be passed ==="
          echo "LIBRESCOOT_VERSION=${{ needs.generate-timestamp.outputs.timestamp }}"
          echo "SCOOTUI_VERSION_UPDATE=0.4.7+git${{ needs.generate-timestamp.outputs.timestamp }}"
          
          echo "=== DEBUG: Modified build.sh content ==="
          grep "docker run" build.sh

          # Build only the scootui package for DBC target with version update
          LIBRESCOOT_VERSION="${{ needs.generate-timestamp.outputs.timestamp }}" SCOOTUI_VERSION_UPDATE="0.4.7+git${{ needs.generate-timestamp.outputs.timestamp }}" PACKAGE="scootui" ./build.sh dbc

      - name: Extract ScootUI RPM
        run: |
          mkdir -p artifacts/dbc-rpm

          # Find and copy scootui RPM from the DBC build
          SCOOTUI_RPM=$(find librescoot/yocto/build/tmp/deploy/rpm -name "*scootui*.rpm" | head -1)
          if [ -n "$SCOOTUI_RPM" ]; then
            cp "$SCOOTUI_RPM" artifacts/dbc-rpm/scootui-dbc-${{ needs.generate-timestamp.outputs.timestamp }}.rpm
            echo "Found ScootUI RPM: $SCOOTUI_RPM"
            ls -la artifacts/dbc-rpm/
          else
            echo "ERROR: No ScootUI RPM found!"
            find librescoot/yocto/build -name "*scootui*.rpm" | head -10
            exit 1
          fi

      - name: Upload ScootUI RPM artifact
        uses: actions/upload-artifact@v4
        with:
          name: scootui-dbc-rpm-${{ needs.generate-timestamp.outputs.timestamp }}
          path: artifacts/dbc-rpm/*.rpm
          retention-days: 30
          compression-level: 0

  create-release:
    name: Create Release
    needs: [build-dbc-rpm, generate-timestamp]
    # This job will now run on every push to main or workflow_dispatch,
    # as the check-changes job and its conditional logic have been removed.
    runs-on: self-hosted
    steps:
      - name: Download RPM artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate changelog
        id: changelog
        run: |
          # Basic changelog content.
          # The previous dynamic changelog based on 'since_time' from 'check-changes' job has been removed.
          # You might want to implement a new strategy for changelog generation here,
          # e.g., using git commits between the current and previous tag, or commits in the push.
          CHANGELOG="Automated RPM build."
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Set date tag
        id: date
        run: |
          echo "value=${{ needs.generate-timestamp.outputs.timestamp }}" >> $GITHUB_OUTPUT

      - name: Create Github release
        uses: softprops/action-gh-release@v1
        with:
          name: ScootUI DBC RPM Build ${{ steps.date.outputs.value }}
          tag_name: dbc-rpm-${{ steps.date.outputs.value }}
          prerelease: true
          files: |
            artifacts/**/*.rpm
          body: |
            ðŸ“¦ ScootUI DBC RPM Build (version ${{ steps.date.outputs.value }})

            This build contains the ScootUI RPM package specifically built for the Dashboard Controller (DBC).

            ## Changelog
            ${{ steps.changelog.outputs.content }}

            Build completed at: ${{ github.event.repository.updated_at }}
            Commit: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
